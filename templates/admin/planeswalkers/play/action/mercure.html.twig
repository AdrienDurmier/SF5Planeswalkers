{% macro script(game) %}
    <script>
        {# Mercure #}
        const url = new URL('{{mercure_publish_url}}');
        url.searchParams.append('topic', 'planeswalkers-game-'+ {{ game.id }} );
        const eventSource = new EventSource(url);
        eventSource.onmessage = event => {
            let retourMercure = JSON.parse(event.data);
            console.log(retourMercure);
            let player_area = $('.player-area-' + retourMercure.player);

            {# Mise à jour des zones de jeu liées à l'action #}
            if (typeof retourMercure.move !== 'undefined'){
                if (retourMercure.move.from === 'exile' || retourMercure.move.to === 'exile'){
                    renderExile(retourMercure.areas, player_area);
                }
                if (retourMercure.move.from === 'library' || retourMercure.move.to === 'library'){
                    renderLibrary(retourMercure.areas, player_area);
                }
                if (retourMercure.move.from === 'graveyard' || retourMercure.move.to === 'graveyard'){
                    renderGraveyard(retourMercure.areas, player_area);
                }
                if (retourMercure.move.from === 'hand' || retourMercure.move.to === 'hand'){
                    if (playerId === parseInt(retourMercure.player)){
                        renderPlayerHand(retourMercure.areas, player_area);
                    }else{
                        renderOpponentHand(retourMercure.areas, player_area);
                    }
                }
                if (retourMercure.move.from === 'battlefield' || retourMercure.move.to === 'battlefield'){
                    renderBattlefield(retourMercure.areas, player_area);
                }
            }

            {# Déplace une carte vers le dessous de la bibliothèque #}
            if (typeof retourMercure.action !== 'undefined' && retourMercure.action === 'bottom-library'){
                if (retourMercure.from === 'hand'){
                    renderPlayerHand(retourMercure.areas, player_area);
                }
                if (retourMercure.from === 'battlefield'){
                    renderBattlefield(retourMercure.areas, player_area);
                }
                renderLibrary(retourMercure.areas, player_area);
            }

            {# Modification des points de vie #}
            if (typeof retourMercure.action !== 'undefined' && retourMercure.action === 'lifepoint'){
                renderLifepoint(retourMercure);
            }

            {# Modification d'une gameCardBattlefield #}
            if (typeof retourMercure.gameCardBattlefield !== 'undefined'){
                renderGameCardBattlefield(retourMercure);
            }

            {# Switch d'une carte #}
            if (typeof retourMercure.action !== 'undefined' && retourMercure.action === 'switch'){
                renderBattlefield(retourMercure.playerAreas, player_area);
                let opponent_area = $('.player-area-' + retourMercure.opponent);
                renderBattlefield(retourMercure.opponentAreas, opponent_area);
            }

            {# Clone d'une gameCardBattlefield #}
            if (typeof retourMercure.action !== 'undefined' && retourMercure.action === 'clone'){
                cloneGameCardBattlefield(retourMercure, player_area);
            }

            {# Logs #}
            if (retourMercure.log){
                renderLog(retourMercure);
            }

            {# Messages #}
            if (retourMercure.message){
                renderMessage(retourMercure);
            }
        }
    </script>
{% endmacro %}